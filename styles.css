@font-face {
    font-family: Fraunces;
    src: url('assets/fonts/fraunces/Fraunces-VariableFont_SOFT\,WONK\,opsz\,wght.ttf');
}

@font-face {
    font-family: Manrope;
    src: url('assets/fonts/manrope/Manrope-VariableFont_wght.ttf');
}

:root {
    --teal: hsl(180, 100%, 25%, 0.7);
}
* {
    font-family: Manrope, sans-serif;
    box-sizing: border-box;
}

h1, h2, h3, h4, h5, h6, p {
    margin: 0;
}

button {
    border: 0;
    padding: 10px;
    border-radius: 5px;
    cursor: pointer;
    background-color: teal;
}

button:hover {
    background-color: cyan;
}

body{
    margin: 0;
}

header {
    display: flex;
    justify-content: space-between;
    background-color: purple;
    padding: 15px;
}

#hero {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: purple;
    /* border-radius: 0 0 300px 300px; */
    position: relative;
    padding: 15px;
    padding-bottom: 200px;
    margin-bottom: 175px;
    padding-top: 100px;
}

#image-hero {
   width: 450px;
   max-width: 100%;
   position: absolute;
   top: 275px;
}


#access{
    color: white;
    text-decoration: none;
    border-bottom: 10px solid var(--teal);

}

h1, h2, h3 {
    font-family: Fraunces, serif;  
}

/*
    border-width: 1px;
    border-style: solid;
    border-color: black;

    border: 1px solid black;

    justify-content - aligning horiz
    align-items - aligning vert

    When do we use flex/grid?

        When we have a containing element and we want more control over the alignment of the children.
*/
.description {
    display: flex;
    flex-direction: column;
    align-items: center;
    color: purple;
    padding: 15px;
}

.description > h2 {
    border: 1px solid purple;
    width: 50px;
    height: 50px;
    border-radius: 50%;
}

.dead-center {
    display: flex;
    justify-content: center;
    align-items: center;
}

.about-us {
    margin-top: 200px;
    position: relative; /* make sure there is a non-static ancestor */
}

.about-us > img {
    width: 200px;
    position: absolute; /* when you position absolute, the element will look for a non-static ancestor and position itself relative to THAT */
    bottom: 90%;
}

.about-us-bg {
    position: relative; /* i want this element to also be non-static so i can control the positioning on the z-axis */
    background-color: purple;
    color: white;
    padding: 30px;
}

.about-us button {
    background-color: var(--teal);

}


.flex {display: flex;}
.aic {align-items: center;}
.jcc {justify-content: center;}
.col {flex-direction: column;}